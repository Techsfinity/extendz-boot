package club.extendz.spring.modelMeta.services;

import java.io.IOException;
import java.nio.file.Paths;

import javax.lang.model.element.Modifier;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.RestController;

import com.squareup.javapoet.AnnotationSpec;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.ParameterizedTypeName;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class SourceCodeGenerationService {

	private final String GEN_PACKAGE = ".gen";

	public void gerateControllers(Class<?> domainType) {
		if (domainType.getSimpleName().equals("Product")) {

			String className = domainType.getSimpleName();
			String packageName = domainType.getPackage().getName();

			FieldSpec entityManager = FieldSpec.builder(EntityManager.class, "entityManager")
					.addAnnotation(PersistenceContext.class).addModifiers(Modifier.PRIVATE).build();

			// Get the domain class
			ClassName entityClass = ClassName.get(packageName, className);
			ClassName auditReader = ClassName.get("org.hibernate.envers", "AuditReader");
			ClassName auditReaderFactory = ClassName.get("org.hibernate.envers", "AuditReaderFactory");
			ClassName number = ClassName.get("java.lang", "Number");
			ClassName list = ClassName.get("java.util", "List");
			ClassName arrayList = ClassName.get("java.util", "ArrayList");
			TypeName listOfEntities = ParameterizedTypeName.get(list, entityClass);
			TypeName listOfNumber = ParameterizedTypeName.get(list, number);

			MethodSpec revisions = MethodSpec.methodBuilder("getRevisions").returns(listOfEntities)
					.addParameter(TypeName.LONG, "id")
					.addStatement("$T auditReader =$T.get(entityManager)", auditReader, auditReaderFactory)
					.addStatement("$T revisions = auditReader.getRevisions($T.class, id)", listOfNumber, entityClass)
					.addStatement("$T revisons = new $T<>()", listOfEntities, arrayList)
					.beginControlFlow("for ($T revision : revisions)", number)
					.addStatement("revisons.add(auditReader.find($T.class, id, revision))", entityClass)
					.endControlFlow().addStatement("return revisons").build();

			TypeSpec flightPlanSpec = TypeSpec.classBuilder(className + "RevisionRepository")
					.addAnnotation(AnnotationSpec.builder(Repository.class).build())
					.addAnnotation(AnnotationSpec.builder(Transactional.class).build()).addModifiers(Modifier.PUBLIC)
					.addField(entityManager).addMethod(revisions).build();

			JavaFile javaFile = JavaFile.builder(packageName + GEN_PACKAGE, flightPlanSpec)
					.addFileComment("Generated by Extendz. Don't modify").build();
			this.writteJavaFile(javaFile);
			this.generateRepository(domainType);
		}

	}// gerateControllers()

	private void generateRepository(Class<?> domainType) {
		String className = domainType.getSimpleName();
		String packageName = domainType.getPackage().getName();

		ClassName list = ClassName.get("java.util", "List");
		ClassName entityClass = ClassName.get(packageName, className);
		ClassName entityRevisonRepository = ClassName.get(packageName + GEN_PACKAGE, className + "RevisionRepository");
		TypeName listOfEntities = ParameterizedTypeName.get(list, entityClass);

		FieldSpec revisionRepository = FieldSpec
				.builder(entityRevisonRepository, className + "RevisionRepository", Modifier.PRIVATE)
				.addAnnotation(Autowired.class).build();

		TypeSpec typeSpec = TypeSpec.classBuilder(className + "Controller")
				.addAnnotation(AnnotationSpec.builder(RestController.class).addMember("value", "$S", "/api/").build())
				.addField(revisionRepository).addModifiers(Modifier.PUBLIC).build();

		JavaFile javaFile = JavaFile.builder(packageName + GEN_PACKAGE, typeSpec)
				.addFileComment("Generated by Extendz. Don't modify").build();

		this.writteJavaFile(javaFile);
	} // generateRepository()

	private void writteJavaFile(JavaFile javaFile) {
		try {
			// root maven source
			javaFile.writeTo(Paths.get("./src/main/java"));
		} catch (IOException ex) {
			System.out.println("An exception ... Really!?! " + ex.getMessage());
		}
	} // writteJavaFile()

}
