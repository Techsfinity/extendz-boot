package club.extendz.spring.modelMeta.services;

import java.io.IOException;
import java.nio.file.Paths;

import javax.lang.model.element.Modifier;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.Transactional;

import org.apache.commons.lang3.text.WordUtils;
import org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration;
import org.springframework.stereotype.Repository;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.squareup.javapoet.AnnotationSpec;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.ParameterSpec;
import com.squareup.javapoet.ParameterizedTypeName;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;

import club.extendz.spring.modelMeta.models.utils.Model;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class SourceCodeGenerationService {

	private RepositoryRestMvcConfiguration restMvcConfiguration;

	private final String GEN_PACKAGE = ".gen";
	private final ClassName LONG_CLASS_NAME = ClassName.get("java.lang", "Long");
	private final ClassName NUMBER_CLASS_NAME = ClassName.get("java.lang", "Number");
	private final ClassName LIST_CLASS_NAME = ClassName.get("java.util", "List");

	public SourceCodeGenerationService(RepositoryRestMvcConfiguration restMvcConfiguration) {
		this.restMvcConfiguration = restMvcConfiguration;
	}

	private void generateAuditingRepository(Class<?> domainType) {
		String className = domainType.getSimpleName();
		String packageName = domainType.getPackage().getName();

		FieldSpec entityManager = FieldSpec.builder(EntityManager.class, "entityManager")
				.addAnnotation(PersistenceContext.class).addModifiers(Modifier.PRIVATE).build();

		// Get the domain class
		ClassName entityClass = ClassName.get(packageName, className);
		ClassName auditReader = ClassName.get("org.hibernate.envers", "AuditReader");
		ClassName auditReaderFactory = ClassName.get("org.hibernate.envers", "AuditReaderFactory");

		ClassName arrayList = ClassName.get("java.util", "ArrayList");
		TypeName listOfEntities = ParameterizedTypeName.get(LIST_CLASS_NAME, entityClass);
		TypeName listOfNumber = ParameterizedTypeName.get(LIST_CLASS_NAME, NUMBER_CLASS_NAME);

		MethodSpec revisions = MethodSpec.methodBuilder("getRevisions").returns(listOfEntities)
				.addParameter(LONG_CLASS_NAME, "id")
				.addStatement("$T auditReader =$T.get(entityManager)", auditReader, auditReaderFactory)
				.addStatement("$T revisions = auditReader.getRevisions($T.class, id)", listOfNumber, entityClass)
				.addStatement("$T revisons = new $T<>()", listOfEntities, arrayList)
				.beginControlFlow("for ($T revision : revisions)", NUMBER_CLASS_NAME)
				.addStatement("revisons.add(auditReader.find($T.class, id, revision))", entityClass).endControlFlow()
				.addStatement("return revisons").build();

		TypeSpec flightPlanSpec = TypeSpec.classBuilder(className + "RevisionRepository")
				.addAnnotation(AnnotationSpec.builder(Repository.class).build())
				.addAnnotation(AnnotationSpec.builder(Transactional.class).build()).addModifiers(Modifier.PUBLIC)
				.addField(entityManager).addMethod(revisions).build();

		JavaFile javaFile = JavaFile.builder(packageName + GEN_PACKAGE, flightPlanSpec)
				.addFileComment("Generated by Extendz. Don't modify").build();
		this.writteJavaFile(javaFile);

	}// gerateControllers()

	private void generateAuditingController(Class<?> domainType, Model model) {
		String className = domainType.getSimpleName();
		String packageName = domainType.getPackage().getName();

		String unCapitalizedClassName = WordUtils.uncapitalize(className);
		String revisionRepositoryName = className + "RevisionRepository";
		String revisionRepositoryNameSimple = unCapitalizedClassName + "RevisionRepository";

		ClassName entityRevisonRepository = ClassName.get(packageName + GEN_PACKAGE, revisionRepositoryName);

		MethodSpec constructorSpec = MethodSpec.constructorBuilder()
				.addParameter(entityRevisonRepository, revisionRepositoryNameSimple, Modifier.FINAL)
				.addStatement(String.format("this.%s = %s", revisionRepositoryNameSimple, revisionRepositoryNameSimple))
				.addModifiers(Modifier.PUBLIC).build();

		ClassName entityClass = ClassName.get(packageName, className);

		TypeName listOfEntities = ParameterizedTypeName.get(LIST_CLASS_NAME, entityClass);

		MethodSpec getRevisions = MethodSpec.methodBuilder(String.format("get%sRevisions", className))
				.returns(listOfEntities)
				.addParameter(ParameterSpec.builder(LONG_CLASS_NAME, "id")
						.addAnnotation(AnnotationSpec.builder(PathVariable.class).build()).build())

				.addStatement(String.format("return this.%s.getRevisions(id)", revisionRepositoryNameSimple))
				.addAnnotation(AnnotationSpec.builder(RequestMapping.class).addMember("value", "$S", "/revisions/{id}")
						.build())
				.build();

		FieldSpec revisionRepository = FieldSpec
				.builder(entityRevisonRepository, revisionRepositoryNameSimple, Modifier.PRIVATE).build();

		String url = this.restMvcConfiguration.config().getBasePath().getPath() + model.getUrl();
		TypeSpec typeSpec = TypeSpec.classBuilder(className + "Controller")
				.addAnnotation(AnnotationSpec.builder(RestController.class).build())
				.addAnnotation(AnnotationSpec.builder(RequestMapping.class).addMember("value", "$S", url).build())
				.addMethod(constructorSpec).addField(revisionRepository).addMethod(getRevisions).

				addModifiers(Modifier.PUBLIC).build();

		JavaFile javaFile = JavaFile.builder(packageName + GEN_PACKAGE, typeSpec)
				.addFileComment("Generated by Extendz. Don't modify").build();

		this.writteJavaFile(javaFile);
	} // generateRepository()

	private void writteJavaFile(JavaFile javaFile) {
		try {
			// root maven source
			javaFile.writeTo(Paths.get("./src/main/java"));
		} catch (IOException ex) {
			System.out.println("An exception ... Really!?! " + ex.getMessage());
		}
	} // writteJavaFile()

	public void generateAuditingClasses(Class<?> domainType, Model model) {
		System.err.println(domainType.getSimpleName());
		if (domainType.getSimpleName().equals("Department")) {
			this.generateAuditingRepository(domainType);
			this.generateAuditingController(domainType, model);
		}
	}// generateAuditingClasses()

}
